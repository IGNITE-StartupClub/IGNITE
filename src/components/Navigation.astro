---
import ResponsiveToggle from './ResponsiveToggle.astro'
import { DarkMode } from 'accessible-astro-components'
import { Image } from 'astro:assets'
import logo from '../assets/img/logo.svg'
import Logo from '../components/Logo.astro'
import { Icon } from 'astro-icon/components'
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
      <Logo color="white" name="IGNITE"/>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle/>
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Wait for DOM to be fully ready
    setTimeout(() => {
      initializeNavigation();
    }, 0);
  });

  function initializeNavigation() {
    // Variables
    const mainNav = document.querySelector('#main-navigation');
    if (!mainNav) return;

    const mainMenu = mainNav.querySelector('ul');
    
    // Initialize dropdown buttons with proper attributes
    const initializeDropdowns = () => {
      const dropdownButtons = mainNav.querySelectorAll('.has-dropdown button');
      dropdownButtons.forEach(button => {
        // Ensure aria-expanded is set
        if (!button.hasAttribute('aria-expanded')) {
          button.setAttribute('aria-expanded', 'false');
        }
        // Ensure aria-haspopup is set
        if (!button.hasAttribute('aria-haspopup')) {
          button.setAttribute('aria-haspopup', 'true');
        }
      });
      return [...dropdownButtons];
    };

    let dropdownMenus = initializeDropdowns();

    // Set Active Menu Item
    const setActiveMenuItem = () => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul');
      const currentPathname = window.location.pathname;

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[];

        menuItems.forEach((menuItem) => {
          // Clear previous active states
          menuItem.classList.remove('is-active');
          menuItem.removeAttribute('aria-current');

          if (currentPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Startseite') {
            menuItem.classList.add('is-active');
            menuItem.setAttribute('aria-current', 'page');
          } else if (menuItem.textContent === 'Startseite' && currentPathname === '/') {
            menuItem.classList.add('is-active');
            menuItem.setAttribute('aria-current', 'page');
          }
        });
      });
    };

    // Check Menu Size for Mobile/Desktop Toggle
    const checkMenuSize = () => {
      const desktopMenu = document.querySelector('.desktop-menu');
      if (!desktopMenu) return;

      const mainNavWidth = mainNav.getBoundingClientRect().width;
      const desktopMenuWidth = desktopMenu.getBoundingClientRect().width;
      const logoWidthBuffer = 300;
      const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

      if (totalMenuWidth >= mainNavWidth) {
        mainNav.classList.remove('is-desktop');
        mainNav.classList.add('is-mobile');
        // Close all dropdowns when switching to mobile
        closeAllDropdownMenus();
      } else if (totalMenuWidth <= mainNavWidth) {
        mainNav.classList.add('is-desktop');
        mainNav.classList.remove('is-mobile');
        // Close all dropdowns when switching to desktop
        closeAllDropdownMenus();
      }
    };

    // Helper function to check if an element is out of viewport
    const isOutOfViewport = (element) => {
      const elementBounds = element.getBoundingClientRect();
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth);
    };

    // Open dropdown menu
    const openDropdownMenu = (dropdownMenu) => {
      const dropdownList = dropdownMenu.parentNode.querySelector('ul');
      if (!dropdownList) return;

      // Close other dropdowns first
      closeAllDropdownMenus();

      dropdownMenu.classList.add('show');
      dropdownMenu.setAttribute('aria-expanded', 'true');

      // Adjust position if out of viewport
      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto';
        dropdownList.style.right = '0';
      }

      // Ensure the dropdown is visible
      dropdownList.style.display = 'flex';
    };

    // Close dropdown menu
    const closeDropdownMenu = (dropdownMenu) => {
      if (!dropdownMenu) return;

      const dropdownList = dropdownMenu.parentNode.querySelector('ul');
      dropdownMenu.classList.remove('show');
      dropdownMenu.setAttribute('aria-expanded', 'false');
      
      if (dropdownList) {
        dropdownList.style.display = 'none';
        dropdownList.style.left = '';
        dropdownList.style.right = '';
      }
    };

    // Close all dropdown menus
    const closeAllDropdownMenus = () => {
      dropdownMenus.forEach((dropdownMenu) => {
        closeDropdownMenu(dropdownMenu);
      });
    };

    // Toggle dropdown visibility
    const toggleDropdownMenu = (event) => {
      event.preventDefault();
      event.stopPropagation();

      const button = event.currentTarget;
      const isExpanded = button.getAttribute('aria-expanded') === 'true';

      if (!isExpanded) {
        openDropdownMenu(button);
      } else {
        closeDropdownMenu(button);
      }
    };

    // Keyboard navigation for menu
    if (mainMenu) {
      mainMenu.addEventListener('keydown', (event) => {
        const element = event.target as Element;
        const currentMenuItem = element.closest('li');
        const menuItems = [...mainMenu.querySelectorAll('.menu-item')];
        const currentDropdownMenu = element.closest('.has-dropdown button');
        const currentDropdownMenuItem = element.closest('.has-dropdown li');
        const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

        const key = event.key;
        let targetItem;

        if (key === 'ArrowRight') {
          if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
            targetItem = menuItems[0];
          } else {
            targetItem = menuItems[currentIndex + 1];
          }
        }

        if (key === 'ArrowLeft') {
          if (menuItems.indexOf(currentMenuItem) === 0) {
            targetItem = menuItems[menuItems.length - 1];
          } else {
            targetItem = menuItems[currentIndex - 1];
          }
        }

        if (key === 'Escape') {
          targetItem = menuItems[0];
          closeAllDropdownMenus();
        }

        if (currentDropdownMenu) {
          const firstDropdownItem = currentDropdownMenu.nextElementSibling?.querySelector('li');

          if (key === 'ArrowDown') {
            event.preventDefault();
            openDropdownMenu(currentDropdownMenu);
            targetItem = firstDropdownItem;
          }

          if (key === 'Escape') {
            closeDropdownMenu(currentDropdownMenu);
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode;
          const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')];
          const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem);

          if (key === 'ArrowDown') {
            event.preventDefault();

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              targetItem = dropdownMenuItems[0];
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1];
            }
          }

          if (key === 'ArrowUp') {
            event.preventDefault();

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1];
            }
          }

          if (key === 'Escape') {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling;
            targetItem = currentDropdownMenu?.parentNode;
            closeAllDropdownMenus();
          }

          if (key === 'Tab') {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling;

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              closeDropdownMenu(currentDropdownMenu);
            }
          }
        }

        if (targetItem) {
          const focusableElement = targetItem.querySelector('a, button, input');
          if (focusableElement) {
            focusableElement.focus();
          }
        }
      });
    }

    // Remove existing event listeners and add new ones
    const setupDropdownEvents = () => {
      // Re-initialize dropdowns in case DOM changed
      dropdownMenus = initializeDropdowns();
      
      dropdownMenus.forEach((dropdownMenu) => {
        // Remove existing listeners to prevent duplicates
        const newDropdownMenu = dropdownMenu.cloneNode(true);
        dropdownMenu.parentNode.replaceChild(newDropdownMenu, dropdownMenu);
        
        // Add event listener to the new element
        newDropdownMenu.addEventListener('click', toggleDropdownMenu);
      });
      
      // Update the array with new elements
      dropdownMenus = initializeDropdowns();
    };

    // Setup initial events
    setupDropdownEvents();

    // Initialize the menu and check menu size
    setActiveMenuItem();
    checkMenuSize();

    // Window event listeners
    window.addEventListener('resize', () => {
      checkMenuSize();
      closeAllDropdownMenus();
    });

    // Click outside to close dropdowns
    document.addEventListener('click', (event) => {
      const element = event.target as Element;
      if (!element.closest('.has-dropdown')) {
        closeAllDropdownMenus();
      }
    });

    // Handle focus loss
    document.addEventListener('focusin', (event) => {
      const element = event.target as Element;
      if (!element.closest('.has-dropdown')) {
        closeAllDropdownMenus();
      }
    });
  }
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  #main-navigation {
    > .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    &.is-desktop {
      .desktop-menu {
        position: static;
        visibility: visible;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        position: absolute;
        left: 0;
        visibility: hidden;
        z-index: -99;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          font-size: 1.125rem;
          line-height: 1.6875rem;
          text-decoration: none;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        padding: 0.5rem 0;
        width: 100%;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: -1px;
        border: none;
        padding: 0;
        color: var(--neutral-100);
        background: transparent;
        cursor: pointer;

        &:hover {
          color: var(--secondary-100);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          transform: rotate(135deg);
          margin-top: -0.25rem;
          border-width: 0.2em 0.2em 0 0;
          border-style: solid;
          border-color: var(--neutral-100);
          width: 0.85rem;
          height: 0.75em;
          content: '';
          transition: transform 0.2s ease;
        }

        &.show {
          &::after {
            transform: rotate(-45deg);
            margin-top: 0.25rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        z-index: 100;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        border: 2px solid black;
        background-color: var(--neutral-background);
        padding: 1rem;
        min-width: 260px;
        flex-direction: column;
        gap: 1rem;
      }

      /* Show dropdown when button has .show class */
      > button.show ~ ul {
        display: flex !important;
      }
    }

    .darkmode-toggle {
      border: none;
      padding: 0;

      .icon {
        margin-top: 4px;
        inline-size: 30px;
        block-size: 30px;
      }

      svg path {
        fill: var(--action-color);
      }

      &:hover {
        box-shadow: none;

        svg path {
          fill: var(--action-color-state);
        }
      }

      &:focus {
        @include outline;

        &:not(:focus-visible) {
          outline: none;
          box-shadow: none;
        }
      }
    }
  }
</style>